# -*- coding: utf-8 -*-"""Spyder EditorAuthor: wei yao        301256560        yaoweiy@sfu.ca        """from tweepy.streaming import StreamListenerfrom tweepy import OAuthHandlerfrom tweepy import Stream import jsonimport re# Vars storing user Ids to access Twitter APIaccess_token = '3004457773-mcwtl44ExjnrYQ2mEDdnZQ4ukqRqIvfH7986wqc'access_token_secret = 'KNAkgxRLaxa8IP0wSIZfGF3cEkhVtpig8L6vzgf2ZOX3g'consumer_key = 'x7ACjFwB00CSOD71JIRM3b4xV'consumer_secret = 'mBeHhpaqhbWMpKpfQjlbPoX1ImCX7GGZ7eGqU9advQYMHkJNfp'# Query itemtracklist =['COVID-19']tweet_count = 0n_tweets = 1000'''this part is usded for testing print display onlyclass StdOutListener(StreamListener):    def on_data(self,data):        global tweet_count        global n_tweets        global stream                # tweet = {}        if tweet_count < n_tweets:            try:                print(tweet_count,data,"\n")                tweet_count += 1                            except BaseException:                print('Error:',tweet_count,data)                                return True        else:            stream.disconnect()                def on_error(self,status):                print(status)'''   class StdOutListener(StreamListener):    def on_data(self,data):        global tweet_count        global n_tweets        global stream                # tweet = {}        if tweet_count < n_tweets:                        try:                                print(tweet_count,data,"\n")                tweet_data = json.loads(data)                pattern1 = re.compile(r'\n')                                   # in order to get full_text if possible                if hasattr(tweet_data, 'retweeted_status'):  # Check if Retweet                    try:                        tweet_txt = pattern1.sub(r'',tweet_data['retweeted_status']['extended_tweet']['full_text'] )                                         except AttributeError:                        tweet_txt = pattern1.sub(r'', tweet_data['retweeted_status']['text'])                                        else:                    try:                        tweet_txt = pattern1.sub(r'',tweet_data['extended_tweet']['full_text'] )                                      except AttributeError:                        tweet_txt = pattern1.sub(r'',tweet_data['text'] )                                           pattern2 =re.compile(r'RT')                tweet =pattern2.sub(r'', tweet_txt)                f = open("/Users/mozzie/Desktop/353fp/cmpt353finalproject/D2.txt ", "a+")                # also use stream.sample() without filter                f.write(str(tweet_data['id']) + "\t"+ tweet + "\n")                f.close()                tweet_count += 1                      except BaseException:                print('Error:',tweet_count,data)                            return True        else:            stream.disconnect()                def on_error(self,status):                print(status)     #streaming tweets   l = StdOutListener()auth = OAuthHandler(consumer_key,consumer_secret)auth.set_access_token(access_token,access_token_secret)stream = Stream(auth= auth,listener = l,tweet_mode ='extended')# default sample stream# stream.sample(is_async = True)# use filter method when need query"COVID-19" from data stream.filter(track=tracklist)